Bitwise Operators
    ใช้สำหรับดำเนินการกับข้อมูลในระดับ bit โดยประกอบด้วย
        1. and          &       bit ทั้ง 2 ตำแหน่งจะต้องมีค่าเท่ากัน
        2. or           |       bit ทั้ง 2 อันใดอันหนึ่งเป็นจริง คำตอบจะเป็นจริง
        3. xor          ^       bit ทั้ง 2 แตกต่างกัน
        4. not          ~       เปลี่ยนสถานะของ bit ทุกตัว จาก 1 เป็น 0 และจาก 0 เป็น 1
        5. left-shift   <<      เป็นการขยับ bit ไปทางซ้าย
        6. right-shift  >>      เป็นการขยับ bit ไปทางขวา

    bit table
        bit_1   bit_2   &       |       ^
        0       0       0       0       0
        1       0       0       1       1
        0       1       0       1       1
        1       1       1       1       0

    
    โดยปกติแล้วข้อมูลจะถูกเก็บไว้ในรูปแบบ binary
    เช่น
        int x = 11, y = 5, z;

        x = 1011;
        y = 0101;

    เมื่อเรานำมาดำเนินการ &
    z = x & y;
    จำเป็นการนำ bit ของ x และ y มาเปรียบเทียบกัน ตามเงื่อนไขของตัวดำเนินการ
    
        x & y
        00001011
                &
        00000101
        --------
        00000001
        ========
        ค่าที่ได้จากการ x & y มีค่าเท่ากับ 1

        x ^ y
        00001011
                ^
        00000101
        --------
        00000001
        ========
        ค่าที่ได้จากการ x ^ y มีค่าเท่ากับ 1

        ~x 
        ~00001011 -> 11110101

    ** โดยปกติแล้ว left and right shift จะใช้บ่อยในการาพัฒนาอุปกรณ์ไดรเวอร์, operation system หรือ
    โปรแกรมอะไรก็ตามที่ทำงานโดยตรงกับ hardware

    ตัวอย่าง
        int x = 5, y;
        x = 00000101;
        y = x << 1;

        00000101
                << 1
       00000101_
        ตรงชื่อที่ว่างอยู่ ( _ ) จะเติม 0 เข้าไปแทน
        ตรงที่จำนวน bit เกิดออกไป จะตัดออก
        ทำให้ผลลัพธ์ที่ได้จะกลายเป็น
        00001010 #
        ผลลัพธ์จากการ x << 1 จะมีค่าเท่ากับ 10

        ** x << i จะมีค่าเท่ากับการคูณ x * 2^i

        ในส่วนของ right-shift จะทำเหมือนกับ left แต่จะขยับ bit ไปทางขวา 
        และจะนำจำนวนที่ระบุในการ shift มาหาร เช่น 
        ** x >> i จะมีค่าเท่ากับการหาร x / 2^i